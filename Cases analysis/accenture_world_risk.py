# -*- coding: utf-8 -*-
"""Accenture_World_Risk.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VroRyql1NKs9XWsJhcBI1JW3JCPRWRjX
"""

import os
import numpy as np
import pandas as pd
import scipy as sp

import matplotlib.pyplot as plt
import seaborn as sns

import plotly
from plotly import tools, subplots
import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.express as px
import plotly.figure_factory as ff
import plotly.io as pio
pio.templates.default = "plotly_dark"

from sklearn import preprocessing
from sklearn.model_selection import KFold

from datetime import datetime

# %%time
# import requests

# for filename in ['time_series_covid19_confirmed_global.csv',
#                  'time_series_covid19_deaths_global.csv',
#                  'time_series_covid19_recovered_global.csv',
#                  'time_series_covid19_confirmed_US.csv',
#                  'time_series_covid19_deaths_US.csv']:
#     print(f'Downloading {filename}')
#     url = f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/{filename}'
#     myfile = requests.get(url)
#     open(filename, 'wb').write(myfile.content)

def _convert_date_str(df):
    try:
        df.columns = list(df.columns[:4]) + [datetime.strptime(d, "%m/%d/%y").date().strftime("%Y-%m-%d") for d in df.columns[4:]]
    except:
        print('_convert_date_str failed with %y, try %Y')
        df.columns = list(df.columns[:4]) + [datetime.strptime(d, "%m/%d/%Y").date().strftime("%Y-%m-%d") for d in df.columns[4:]]

confirmed_global_df = pd.read_csv('time_series_covid19_confirmed_global.csv')
_convert_date_str(confirmed_global_df)
deaths_global_df = pd.read_csv('time_series_covid19_deaths_global.csv')
_convert_date_str(deaths_global_df)
recovered_global_df = pd.read_csv('time_series_covid19_recovered_global.csv')
_convert_date_str(recovered_global_df)

# Filtering out problematic data points 
#The West Bank and Gaza had a negative value, cruise ships were associated with Canada, etc.
removed_states = "Recovered|Grand Princess|Diamond Princess"
removed_countries = "West Bank and Gaza"

confirmed_global_df.rename(columns={"Province/State": "Province_State", "Country/Region": "Country_Region"}, inplace=True)
deaths_global_df.rename(columns={"Province/State": "Province_State", "Country/Region": "Country_Region"}, inplace=True)
recovered_global_df.rename(columns={"Province/State": "Province_State", "Country/Region": "Country_Region"}, inplace=True)

confirmed_global_df = confirmed_global_df[~confirmed_global_df["Province_State"].replace(np.nan, "nan").str.match(removed_states)]
deaths_global_df    = deaths_global_df[~deaths_global_df["Province_State"].replace(np.nan, "nan").str.match(removed_states)]
recovered_global_df = recovered_global_df[~recovered_global_df["Province_State"].replace(np.nan, "nan").str.match(removed_states)]

confirmed_global_df = confirmed_global_df[~confirmed_global_df["Country_Region"].replace(np.nan, "nan").str.match(removed_countries)]
deaths_global_df    = deaths_global_df[~deaths_global_df["Country_Region"].replace(np.nan, "nan").str.match(removed_countries)]
recovered_global_df = recovered_global_df[~recovered_global_df["Country_Region"].replace(np.nan, "nan").str.match(removed_countries)]

confirmed_global_melt_df = confirmed_global_df.melt(id_vars=['Country_Region', 'Province_State', 'Lat', 'Long'], value_vars=confirmed_global_df.columns[4:], var_name='Date', value_name='ConfirmedCases')
deaths_global_melt_df = deaths_global_df.melt(id_vars=['Country_Region', 'Province_State', 'Lat', 'Long'], value_vars=confirmed_global_df.columns[4:], var_name='Date', value_name='Deaths')
recovered_global_melt_df = deaths_global_df.melt(id_vars=['Country_Region', 'Province_State', 'Lat', 'Long'], value_vars=confirmed_global_df.columns[4:], var_name='Date', value_name='Recovered')

train = confirmed_global_melt_df.merge(deaths_global_melt_df, on=['Country_Region', 'Province_State', 'Lat', 'Long', 'Date'])
train = train.merge(recovered_global_melt_df, on=['Country_Region', 'Province_State', 'Lat', 'Long', 'Date'])

print("Total countries ",len(train["Country_Region"].unique()))

train.rename({'Country_Region': 'country', 'Province_State': 'province', 'Id': 'id', 'Date': 'date', 'ConfirmedCases': 'confirmed', 'Deaths': 'fatalities', 'Recovered': 'recovered'}, axis=1, inplace=True)
train['country_province'] = train['country'].fillna('') + '/' + train['province'].fillna('')

ww_df = train.groupby('date')[['confirmed', 'fatalities']].sum().reset_index()
ww_df['new_case'] = ww_df['confirmed'] - ww_df['confirmed'].shift(1)
ww_df['growth_factor'] = ww_df['new_case'] / ww_df['new_case'].shift(1)

ww_melt_df = pd.melt(ww_df, id_vars=['date'], value_vars=['confirmed', 'fatalities', 'new_case'])

fig = px.line(ww_melt_df, x="date", y="value", color='variable', title="Worldwide Confirmed/Death/new_cases Cases Over Time")
plotly.offline.plot(fig, filename='Worldwide_Cases_Over_Time.html')

fig = px.line(ww_melt_df, x="date", y="value", color='variable', title="Worldwide Confirmed/Death Cases Over Time (Log scale)",log_y=True)
plotly.offline.plot(fig, filename='Worldwide_Cases_Over_Time_log_scale.html')

ww_df['mortality'] = ww_df['fatalities'] / ww_df['confirmed']
fig = px.line(ww_df, x="date", y="mortality", title="Worldwide Mortality Rate Over Time")
plotly.offline.plot(fig, filename='Worldwide_Mortality_Rate_Over_Time.html')

fig = px.line(ww_df, x="date", y="growth_factor", title="Worldwide Growth Factor Over Time")
fig.add_trace(go.Scatter(x=[ww_df['date'].min(), ww_df['date'].max()], y=[1., 1.], name='Growth factor=1.', line=dict(dash='dash', color=('rgb(255, 0, 0)'))))
fig.update_yaxes(range=[0., 5.])
plotly.offline.plot(fig, filename='Worldwide_Growth_Factor_Over_Time.html')

country_df = train.groupby(['date', 'country'])[['confirmed', 'fatalities']].sum().reset_index()

target_date = country_df['date'].max()

print('Date: ', target_date)
for i in [1, 100, 10000, 1000000,5000000]:
    n_countries = len(country_df.query('(date == @target_date) & confirmed > @i'))
    print(f'{n_countries} countries have more than {i} confirmed cases')

top_country_df = country_df.query('(date == @target_date) & (confirmed > 1000)').sort_values('confirmed', ascending=False)
top_country_melt_df = pd.melt(top_country_df, id_vars='country', value_vars=['confirmed', 'fatalities'])

top10_countries = top_country_df.sort_values('confirmed', ascending=False).iloc[:10]['country'].unique()
top10_countries_df = country_df[country_df['country'].isin(top10_countries)]
fig = px.line(top10_countries_df,
              x='date', y='confirmed', color='country',
              title=f'Confirmed Cases for top 10 country as of {target_date}')
plotly.offline.plot(fig, filename='Confirmed_Cases_for _top_10_country.html')

top10_countries = top_country_df.sort_values('fatalities', ascending=False).iloc[:10]['country'].unique()
top10_countries_df = country_df[country_df['country'].isin(top10_countries)]
fig = px.line(top10_countries_df,x='date', y='fatalities', color='country', title=f'Fatalities for top 10 country as of {target_date}')
plotly.offline.plot(fig, filename='Fatalities_Cases_for _top_10_country.html')

all_country_df = country_df.query('date == @target_date')
all_country_df['confirmed_log1p'] = np.log10(all_country_df['confirmed'] + 1)
all_country_df['fatalities_log1p'] = np.log10(all_country_df['fatalities'] + 1)
all_country_df['mortality_rate'] = all_country_df['fatalities'] / all_country_df['confirmed']

fig = px.choropleth(all_country_df, locations="country", locationmode='country names', color="confirmed_log1p", hover_name="country", hover_data=["confirmed", 'fatalities', 'mortality_rate'], range_color=[all_country_df['confirmed_log1p'].min(), all_country_df['confirmed_log1p'].max()],color_continuous_scale="peach", title='Countries with Confirmed Cases')
trace1 = list(fig.select_traces())[0]
trace1.colorbar = go.choropleth.ColorBar(tickvals=[0, 1, 2, 3, 4, 5],ticktext=['1', '10', '100', '1000','10000', '10000'])
plotly.offline.plot(fig, filename='Countries_with_Confirmed_Cases.html')

fig = px.choropleth(all_country_df, locations="country",locationmode='country names', color="fatalities_log1p", hover_name="country", range_color=[0, 4],hover_data=['confirmed', 'fatalities', 'mortality_rate'], color_continuous_scale="peach", title='Countries with fatalities')
plotly.offline.plot(fig, filename='Countries_with_fatalities.html')

country_df['prev_confirmed'] = country_df.groupby('country')['confirmed'].shift(1)
country_df['new_case'] = country_df['confirmed'] - country_df['prev_confirmed']
country_df['new_case'].fillna(0, inplace=True)
top10_country_df = country_df[country_df['country'].isin(top10_countries)]

fig = px.line(top10_country_df,x='date', y='new_case', color='country',title=f'DAILY NEW Confirmed cases by country')
plotly.offline.plot(fig, filename='DAILY_NEW_Confirmed_cases_by_country.html')

fig = px.choropleth(all_country_df, locations="country",locationmode='country names', color="mortality_rate", hover_name="country", range_color=[0, 0.12],color_continuous_scale="peach", title='Countries with mortality rate')
plotly.offline.plot(fig, filename='Countries_with_mortality_rate.html')

country_df['prev_new_case'] = country_df.groupby('country')['new_case'].shift(1)
country_df['growth_factor'] = country_df['new_case'] / country_df['prev_new_case']
country_df['growth_factor'].fillna(0, inplace=True)
top10_country_df = country_df[country_df['country'].isin(top10_countries)]
fig = px.line(top10_country_df,x='date', y='growth_factor', color='country',title=f'Growth factor by country')
fig.add_trace(go.Scatter(x=[ww_df['date'].min(), ww_df['date'].max()], y=[1., 1.], name='Growth factor=1.', line=dict(dash='dash', color=('rgb(255, 0, 0)'))))
fig.update_yaxes(range=[0., 5.])
plotly.offline.plot(fig, filename='Growth_factor_by_country.html')

fig = px.choropleth(all_country_df, locations="country",locationmode='country names', color="mortality_rate",hover_name="country", range_color=[0, 0.12], color_continuous_scale="peach",title='Countries with mortality rate')
plotly.offline.plot(fig, filename='Countries_with_mortality_rate.html')

